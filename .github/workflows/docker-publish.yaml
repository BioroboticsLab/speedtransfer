name: Docker

# This workflow builds, signs, and publishes Docker images and Apptainer (.sif) images
# to GitHub Container Registry (GHCR). It lowercases all repository paths to satisfy
# OCI reference rules.

on:
  push:
    # Publish semver tags as releases.
    tags: ['v*.*.*']

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up image coordinates
        # Lowercase owner/repo and extract tag name
        run: |
          echo "OWNER_LOWER=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          echo "REPO_LOWER=${GITHUB_REPOSITORY,,}"       >> $GITHUB_ENV
          echo "IMAGE_REF=${{ env.REGISTRY }}/${OWNER_LOWER}/${REPO_LOWER}" >> $GITHUB_ENV
          # strip refs/tags/ prefix
          TAG=${GITHUB_REF#refs/tags/}
          echo "TAG=${TAG}" >> $GITHUB_ENV

      # Install cosign for signing (skip on PRs)
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20
        with:
          cosign-release: 'v2.2.4'

      # Set up BuildKit for multi-platform builds & cache
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226

      # Log into GHCR (skip on PRs)
      - name: Log into registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract Docker metadata (tags, labels)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REF }}

      # Build & push Docker image
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Sign Docker image digest (skip on PRs)
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request'
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

      # Clean up to free disk space before Apptainer build
      - name: Clean up disk space
        uses: jlumbroso/free-disk-space@main

      # Install Apptainer
      - name: Setup Apptainer
        uses: eWaterCycle/setup-apptainer@v2

      # Build and push Apptainer (.sif) image
      - name: Build and publish Apptainer image
        env:
          GHCR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Login to GHCR for Apptainer
          echo "${GHCR_TOKEN}" | apptainer registry login \
            -u "${{ github.actor }}" --password-stdin docker://${{ env.REGISTRY }}
          # Build .sif from the just-published Docker image
          apptainer build container.sif docker://${{ env.IMAGE_REF }}:latest
          # Push .sif to GHCR with ORAS under a "-sif" suffix
          apptainer push container.sif oras://${{ env.REGISTRY }}/${OWNER_LOWER}/${REPO_LOWER}-sif:${TAG}