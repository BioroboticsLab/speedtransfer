clear all 
close all
for density_factor = [0.5, 1, 2, 5, 10, 20, 30, 40, 50]
    fprintf('density factor: %f', density_factor)
    F = findall(0,'type','figure','tag','TMWWaitbar');
    delete(F)
    
    % PARAMETER INIT
    % scales all forward speeds and homing pull
    prm.speed_scale = 50;
    
    % number of agents to sample
    prm.group1.N    = 500 * density_factor; 
    prm.group2.N    = 500 * density_factor;
    prm.N           = prm.group1.N + prm.group2.N;
    
    % precompute helper indices
    prm.idx_group1  = 1 : prm.group1.N;
    prm.idx_group2  = prm.group1.N + [1 : prm.group2.N];
    
    % hive bounds [XMIN XMAX YMIN YMAX]
    prm.comb_size_x = 354;
    prm.comb_size_y = 205;
    prm.hive_bounds = [-prm.comb_size_x/2 prm.comb_size_x/2 -prm.comb_size_y/2 prm.comb_size_y/2];
    prm.hive_discretization_number_of_bins_x = 45;
    prm.hive_discretization_number_of_bins_y = 30;
    
    % intial position and covariance of agents
    % prm.group1.mu   = [prm.hive_bounds(1)+0.6*prm.hive_bounds(2) 0];
    % prm.group2.mu   = [prm.hive_bounds(1)+1.4*prm.hive_bounds(2) 0];
    prm.group1.mu   = [-175 -100];
    prm.group2.mu   = [0 0];
    prm.group1.cov  = prm.speed_scale*eye(2); 
    prm.group2.cov  = prm.speed_scale*eye(2); 
    
    % forward speed: normally distributed with these parameters
    prm.group1.speed_fwd_mu     = .05;
    prm.group1.speed_fwd_std    = .02;
    %prm.group1.speed_fwd_std    = 0;
    prm.group1.min_fwd_speed    = -0.05;
    
    prm.group2.speed_fwd_mu     = .02;
    prm.group2.speed_fwd_std    = .01;
    %prm.group2.speed_fwd_std    = 0;
    prm.group2.min_fwd_speed    = -0.05;
    
    % turning speed: dito
    prm.group1.speed_trn_mu     = 0;
    prm.group1.speed_trn_std    = 0.5; 
    prm.group2.speed_trn_mu     = 0;
    prm.group2.speed_trn_std    = 0.5; 
    
    % homing 
    prm.homing_pull             = .1;
    
    % speed transfer params
    % how much speed can group 1 gain from external sources?
    % scale = 1 --> maximum of <speed_fwd_mu> can be added
    prm.speed_transfer_scale    = 1;
    
    % 
    prm.interaction_threshold_dist = sqrt(prm.speed_scale)*.2;
    
    
    % simulation parameters
    prm.simulation.day_duration = 400;
    prm.simulation.sim_duration = 1600;
    
    % visualization parameters
    prm.visualization.show_point_motion     = true;
    prm.visualization.window_bounds         = 1.1*prm.hive_bounds;
    prm.visualization.center_of_mass_size   = 0.02*(prm.hive_bounds(2)-prm.hive_bounds(1));
    if ~prm.visualization.show_point_motion
        prm.waitbar_handle = waitbar(0, 'Simulating...');
    end
    
    % initialize variables
    agents          = [mgd(prm.group1.N, 2, prm.group1.mu, prm.group1.cov) 2*pi*rand(prm.group1.N,1)];
    agents          = [agents; mgd(prm.group2.N, 2, prm.group2.mu, prm.group2.cov) 2*pi*rand(prm.group2.N,1)];
    speed_transfers = zeros(prm.N, 1); 
    
    OUT.speeds      = nan(prm.N, prm.simulation.sim_duration);
    OUT.cov         = nan(2, prm.simulation.sim_duration);
    OUT.B           = zeros(prm.N, prm.N);
    OUT.speeds_bin  = zeros([prm.hive_discretization_number_of_bins_y prm.hive_discretization_number_of_bins_x prm.simulation.sim_duration]);
    OUT.speeds_bin_n = zeros([prm.hive_discretization_number_of_bins_y prm.hive_discretization_number_of_bins_x prm.simulation.sim_duration]);
    OUT.positions   = nan(prm.N, prm.simulation.sim_duration, 2);
    
    prm.visualization.figs = [figure(1) figure(2) figure(3)];
    
    for t = 1:prm.simulation.sim_duration 
        % external stimuli (e.g. related to weather variables) ...
        % ... are periodic drivers of the motion speed of group 1, one period every <day_duration> time steps
        % size: N x 1
        speed_external_driver = prm.speed_scale*prm.speed_transfer_scale*prm.group1.speed_fwd_mu*0.5*(sin(t*2*pi/prm.simulation.day_duration)+1)*[ones(prm.group1.N, 1); zeros(prm.group2.N, 1)];    
        
        % draw motion speeds from gaussian, clip below 0, add speed transfers
        % size: N x 1
        speeds = [  max(prm.group1.min_fwd_speed, prm.speed_scale*prm.group1.speed_fwd_std*randn(prm.group1.N, 1) + prm.speed_scale*prm.group1.speed_fwd_mu); ...
                    max(prm.group2.min_fwd_speed, prm.speed_scale*prm.group2.speed_fwd_std*randn(prm.group2.N, 1) + prm.speed_scale*prm.group2.speed_fwd_mu) ] ...
                    + speed_transfers + speed_external_driver;
        
        % draw random rotation speed changes
        % size: N x 1
        speeds_trn = [ prm.group1.speed_trn_std * randn(prm.group1.N, 1) + prm.group1.speed_trn_mu; ...
                       prm.group2.speed_trn_std * randn(prm.group2.N, 1) + prm.group2.speed_trn_mu];
    
        % walk into direction agents are facing, scale by speed
        % size: N x 2
        velocities = speeds .* [cos(agents(:,3)) sin(agents(:,3))];
    
         % correct velocities
        home1           = repmat(prm.group1.mu, prm.group1.N, 1) - agents(prm.idx_group1, 1:2);
        home1           = normalize(home1, 2, 'norm');
        velocities(prm.idx_group1, :) = velocities(prm.idx_group1, :) + (prm.speed_scale*prm.homing_pull*prm.group1.speed_fwd_mu+(prm.group1.speed_fwd_mu*prm.speed_transfer_scale/2))*home1;
        
        home2           = repmat(prm.group2.mu, prm.group2.N, 1) - agents(prm.idx_group2, 1:2);
        home2           = normalize(home2, 2, 'norm');
        velocities(prm.idx_group2, :) = velocities(prm.idx_group2, :) + (prm.speed_scale*prm.homing_pull*prm.group2.speed_fwd_mu)*home2;
        
        
        % update positions
        agents(:,1:2)   = agents(:,1:2) + velocities;
        % fprintf('size(agents) is %s\n', mat2str(size(agents)))
        % update orientations
        agents(:,3)     = agents(:,3) + speeds_trn;
    
    
        %% reflect from walls
        % find agents out-of-bounds, set them back on the bounds 
        % and set orientation towards center of group distribution
        idx_temp = find(agents(:,1) < prm.hive_bounds(1));
        agents( idx_temp, 1 ) = prm.hive_bounds(1);
        agents( idx_temp, 3 ) = atan2( - agents( idx_temp, 2), - agents( idx_temp, 1) );
        
        idx_temp = find(agents(:,1) > prm.hive_bounds(2));
        agents( idx_temp, 1 ) = prm.hive_bounds(2);
        agents( idx_temp, 3 ) = atan2( - agents( idx_temp, 2), - agents( idx_temp, 1) );
        
        idx_temp = find(agents(:,2) < prm.hive_bounds(3));
        agents( idx_temp, 2 ) = prm.hive_bounds(3);
        agents( idx_temp, 3 ) = atan2( - agents( idx_temp, 2), - agents( idx_temp, 1) );
        
        idx_temp = find(agents(:,2) > prm.hive_bounds(4));
        agents( idx_temp, 2 ) = prm.hive_bounds(4);
        agents( idx_temp, 3 ) = atan2( - agents( idx_temp, 2), - agents( idx_temp, 1) );
        
       
        
        % identify interactions for speed transfer
        % matrix of agent positions repeated along dim 2
        % [x1 y1 x1 y1 x1 y1 ... ; 
        %  x2 y2 x2 y2 x2 y2 ... ; ...]
        % size: N x 2N
        Q2 = repmat(agents(:,1:2), 1, prm.N);
        
        % matrix with agent positions repeated along dim 1
        % [x1 y1 x2 y2 x3 y3 ...; 
        %  x1 y1 x2 y2 x3 y3 ...; 
        %  x1 y1 x2 y2 x3 y3 ...; 
        %  x1 y1 x2 y2 x3 y3 ...; 
        % ...]
        % size: N x 2N
        Q1 = repmat( reshape(agents(:,1:2)', 2*prm.N, 1)' , prm.N, 1);
        
        % squared differences  between all agents' positions
        % [dx11 dy11 dx12 dy12 dx13 dy13 ...;
        %  dx21 dy21 dx22 dy22 dx23 dy23 ...;
        %  ...]
        % size: N x 2N
        Q = (Q2-Q1).^2;
        
        
        % actual distances 
        % add 2*threshold distance to have self-distance above threshold
        % size: N x N
        D = (2*prm.interaction_threshold_dist)*eye(prm.N)+sqrt(Q(:,1:2:end) + Q(:,2:2:end));
        
        % binary interaction matrix
        W = D < prm.interaction_threshold_dist;
        
        % these ones are sufficiently close, i.e. they interact
        [i,j] = find(W);
        
        % transfer falls off every time step
        %speed_transfers = speed_transfers / 2;
        speed_transfers = speed_transfers * 0;
        
        % for those who interact, add avg speed next time step
        % speed_transfers(i) = speed_xy_avg;
        %speed_transfers(i) = speed_transfers(i)+(speeds(i)<speeds(j)).*(speeds(j)-speeds(i));
        speed_transfers(i) = max(speed_transfers(i), (speeds(i)<speeds(j)).*(speeds(j)-speeds(i)));
        
    
        %% collect statistics   
        OUT.positions(:,t,:)   = agents(:,1:2);
        % fprintf('size(out positions) is %s\n', mat2str(size(OUT.positions(:,t,:))))
        % fprintf('size(agents 1 2) is %s\n', mat2str(size(agents(:,1:2))))
        OUT.speeds(:,t) = speeds;
        
        [N,Xedges,Yedges,binX,binY] = histcounts2(agents(:,1), agents(:,2), [prm.hive_discretization_number_of_bins_x prm.hive_discretization_number_of_bins_y], 'XBinLimits',[prm.hive_bounds(1), prm.hive_bounds(2)], 'YBinLimits',[prm.hive_bounds(3), prm.hive_bounds(4)]);  
        OUT.speeds_bin(:, :, t)     = accumarray([binY binX], speeds, [prm.hive_discretization_number_of_bins_y prm.hive_discretization_number_of_bins_x], @mean);
        OUT.speeds_bin_n(:, :, t)   = N';
        
    
        %% visualize
        if prm.visualization.show_point_motion
            figure(prm.visualization.figs(1))
            % plot group 1 (blue)
            plot(agents(prm.idx_group1, 1), agents(prm.idx_group1, 2), '.')
            hold on
            % plot group 2 (green)
            plot(agents(prm.idx_group2, 1), agents(prm.idx_group2, 2), '.g')
            
            % plot those that interact
            plot(agents(i,1), agents(i,2), 'r.')
            
            % visualize center of mass
            viscircles([mean(agents(prm.idx_group1, 1:2)); mean(agents(prm.idx_group2, 1:2))], [prm.visualization.center_of_mass_size; prm.visualization.center_of_mass_size]);
            
            
            hold off
            
            axis equal
            axis(prm.visualization.window_bounds)
            % saveas(gcf, sprintf('sim_img%d.png', t))
            
            drawnow
        else
            waitbar(t/prm.simulation.sim_duration, prm.waitbar_handle)
        end
    end
    
    %% statistics
    fprintf('group 1 (blue):\n')
    m1 = mean(OUT.speeds(prm.idx_group1, :),1);
    m_all_1 = mean(m1);
    s1 = std(OUT.speeds(prm.idx_group1, :),1);
    s_all_1 = mean(s1);
    c1 = cov(agents(prm.idx_group1, 1:2))
    fprintf('speeds: mu=%f, std=%f\n', m_all_1, s_all_1)
    
    fprintf('group 1 (green):\n')
    m2 = mean(OUT.speeds(prm.idx_group2, :),1);
    m_all_2 = mean(m2);
    s2 = std(OUT.speeds(prm.idx_group2, :),1);
    s_all_2 = mean(s2);
    c2 = cov(agents(prm.idx_group2, 1:2))
    fprintf('speeds: mu=%f, std=%f\n', m_all_2, s_all_2)
    
    %% sine fits
    fit_type_string = sprintf('offset+sin((2*pi/%d)*(x - shift))*yscale', prm.simulation.day_duration);
    
    ft = fittype(fit_type_string,'coefficients',{'shift','offset','yscale'});
    
    x = 1:prm.simulation.sim_duration;
    
    sine_fit1 = fit(x',m1',ft);
    sine_fit2 = fit(x',m2',ft);
    % 
    % phase_vs_location = zeros(prm.hive_discretization_number_of_bins_y, prm.hive_discretization_number_of_bins_x);
    % number_of_sample_vs_location = zeros(prm.hive_discretization_number_of_bins_y, prm.hive_discretization_number_of_bins_x);
    
    % if exist('prm.waitbar_handle')
    %     delete(prm.waitbar_handle);
    % end
    % prm.waitbar_handle = waitbar(0, 'Fitting Sines...');
    % for i = 1 : prm.hive_discretization_number_of_bins_y
    %     for j = 1 : prm.hive_discretization_number_of_bins_x
    %         sine_fit_object = fit_sine(x', reshape(OUT.speeds_bin(i,j,:), [], 1), prm.simulation.day_duration);
    %         sine_params = coeffvalues(sine_fit_object);
    %         phase_vs_location(i,j) = sine_params(1);
    %         number_of_sample_vs_location(i,j) = sum(reshape(OUT.speeds_bin(i,j,:), [], 1));
    % 
    %         prm.waitbar_handle = waitbar((i*prm.hive_discretization_number_of_bins_y+j) / (prm.hive_discretization_number_of_bins_x*prm.hive_discretization_number_of_bins_y), prm.waitbar_handle);
    %     end
    % end
    % delete(prm.waitbar_handle);
    
    
    % imagesc(phase_vs_location)
    
    save(sprintf('OUT_density_%0.1f.mat', density_factor), 'OUT');
    
    %% plots
    figure(prm.visualization.figs(2))
    plot(repmat(1:prm.simulation.sim_duration, prm.group1.N, 1), OUT.speeds(prm.idx_group1, :), '.b')
    hold on
    plot(repmat(1:prm.simulation.sim_duration, prm.group2.N, 1), OUT.speeds(prm.idx_group2, :), '.g')
    plot(m2, 'r')
    plot(m1, 'y')
    
    % plot(x,sine_fit1(x))
    % plot(x,sine_fit2(x))
end

